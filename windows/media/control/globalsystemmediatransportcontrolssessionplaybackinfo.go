// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package control

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
)

const SignatureGlobalSystemMediaTransportControlsSessionPlaybackInfo string = "rc(Windows.Media.Control.GlobalSystemMediaTransportControlsSessionPlaybackInfo;{94b4b6cf-e8ba-51ad-87a7-c10ade106127})"

type GlobalSystemMediaTransportControlsSessionPlaybackInfo struct {
	ole.IUnknown
}

func (impl *GlobalSystemMediaTransportControlsSessionPlaybackInfo) GetControls() (*GlobalSystemMediaTransportControlsSessionPlaybackControls, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiGlobalSystemMediaTransportControlsSessionPlaybackInfo))
	defer itf.Release()
	v := (*iGlobalSystemMediaTransportControlsSessionPlaybackInfo)(unsafe.Pointer(itf))
	return v.GetControls()
}

func (impl *GlobalSystemMediaTransportControlsSessionPlaybackInfo) GetPlaybackStatus() (GlobalSystemMediaTransportControlsSessionPlaybackStatus, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiGlobalSystemMediaTransportControlsSessionPlaybackInfo))
	defer itf.Release()
	v := (*iGlobalSystemMediaTransportControlsSessionPlaybackInfo)(unsafe.Pointer(itf))
	return v.GetPlaybackStatus()
}

func (impl *GlobalSystemMediaTransportControlsSessionPlaybackInfo) GetPlaybackType() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiGlobalSystemMediaTransportControlsSessionPlaybackInfo))
	defer itf.Release()
	v := (*iGlobalSystemMediaTransportControlsSessionPlaybackInfo)(unsafe.Pointer(itf))
	return v.GetPlaybackType()
}

func (impl *GlobalSystemMediaTransportControlsSessionPlaybackInfo) GetAutoRepeatMode() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiGlobalSystemMediaTransportControlsSessionPlaybackInfo))
	defer itf.Release()
	v := (*iGlobalSystemMediaTransportControlsSessionPlaybackInfo)(unsafe.Pointer(itf))
	return v.GetAutoRepeatMode()
}

func (impl *GlobalSystemMediaTransportControlsSessionPlaybackInfo) GetPlaybackRate() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiGlobalSystemMediaTransportControlsSessionPlaybackInfo))
	defer itf.Release()
	v := (*iGlobalSystemMediaTransportControlsSessionPlaybackInfo)(unsafe.Pointer(itf))
	return v.GetPlaybackRate()
}

func (impl *GlobalSystemMediaTransportControlsSessionPlaybackInfo) GetIsShuffleActive() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiGlobalSystemMediaTransportControlsSessionPlaybackInfo))
	defer itf.Release()
	v := (*iGlobalSystemMediaTransportControlsSessionPlaybackInfo)(unsafe.Pointer(itf))
	return v.GetIsShuffleActive()
}

const GUIDiGlobalSystemMediaTransportControlsSessionPlaybackInfo string = "94b4b6cf-e8ba-51ad-87a7-c10ade106127"
const SignatureiGlobalSystemMediaTransportControlsSessionPlaybackInfo string = "{94b4b6cf-e8ba-51ad-87a7-c10ade106127}"

type iGlobalSystemMediaTransportControlsSessionPlaybackInfo struct {
	ole.IInspectable
}

type iGlobalSystemMediaTransportControlsSessionPlaybackInfoVtbl struct {
	ole.IInspectableVtbl

	GetControls        uintptr
	GetPlaybackStatus  uintptr
	GetPlaybackType    uintptr
	GetAutoRepeatMode  uintptr
	GetPlaybackRate    uintptr
	GetIsShuffleActive uintptr
}

func (v *iGlobalSystemMediaTransportControlsSessionPlaybackInfo) VTable() *iGlobalSystemMediaTransportControlsSessionPlaybackInfoVtbl {
	return (*iGlobalSystemMediaTransportControlsSessionPlaybackInfoVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iGlobalSystemMediaTransportControlsSessionPlaybackInfo) GetControls() (*GlobalSystemMediaTransportControlsSessionPlaybackControls, error) {
	var out *GlobalSystemMediaTransportControlsSessionPlaybackControls
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetControls,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out GlobalSystemMediaTransportControlsSessionPlaybackControls
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iGlobalSystemMediaTransportControlsSessionPlaybackInfo) GetPlaybackStatus() (GlobalSystemMediaTransportControlsSessionPlaybackStatus, error) {
	var out GlobalSystemMediaTransportControlsSessionPlaybackStatus
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPlaybackStatus,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out GlobalSystemMediaTransportControlsSessionPlaybackStatus
	)

	if hr != 0 {
		return GlobalSystemMediaTransportControlsSessionPlaybackStatusClosed, ole.NewError(hr)
	}

	return out, nil
}

func (v *iGlobalSystemMediaTransportControlsSessionPlaybackInfo) GetPlaybackType() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPlaybackType,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iGlobalSystemMediaTransportControlsSessionPlaybackInfo) GetAutoRepeatMode() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAutoRepeatMode,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iGlobalSystemMediaTransportControlsSessionPlaybackInfo) GetPlaybackRate() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPlaybackRate,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iGlobalSystemMediaTransportControlsSessionPlaybackInfo) GetIsShuffleActive() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetIsShuffleActive,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
